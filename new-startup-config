(revision 2: can't use canned sandbox configs. cabal's is about to change.
also rename since the new cabal won't really be a sandbox as such, and arguably
stack already isn't. I will note that "sandbox" still applies based on the
original usage which I still want to support in here somehow, where it is
sandboxing multiple xmonad configs from each other for e.g. testing.)

xmonad sandbox/config directory support

build.config
   ${XDG_CONFIG_HOME:-$HOME/.config:${XDG_CONFIG_DIRS:-/etc/xdg}}/xmonad/build.config
   $HOME/Library/Preferences/xmonad/build.config
   $HOME/.xmonad/build.config

The first of these found is used, and defines the default location for other files;
this can be overridden via entries in build.config. If none has this then we repeat
looking for xmonad.hs and otherwise use defaults.

We do not use XDG_DATA_HOME / XDG_DATA_DIRS. Some contribs actually have a use for this,
all currently operating in an ad hoc manner. (It is arguable whether xmonad.errors counts
as data or as cache. I'd been leaning toward cache but may change my mind. That said,
strict reading of XDG spec seems to agree that it should be cache. The local package tree
may also go here.)

All other files are considered generated and belong in $XDG_CACHE_HOME, although it is
up to the ghc_template to enforce this.

The build.config is parsed with ReadP to avoid extra dependencies on a parser.

config = "%config/xmonad.hs" -- pathname to xmonad.hs
errors = "%data/xmonad.errors" -- pathname to xmonad.errors
xmessage_file = "xmessage -in" -- command to run for xmessage; should be UTF8 aware
  -- (note that xmessage itself is not! ghc output will have noise.)
  -- filename is appended to this. It should output literally; Pango-based
  -- programs such as zenity should be told not to process markup.
  -- see https://github.com/geekosaur/xmonad.hs/blob/master/xmessage which
  -- might go into xmonad-contrib.
  -- This is mostly in here because the rebuild uses it to display errors.
  -- Strictly speaking it is not about build, and is intended to address contrib
  -- uses as well.
  -- Likely extension will use %f for filename to allow e.g. sed pipeline.
xmessage_short = "xmessage" -- as above but message is on command line
  -- message will be provided as a single parameter.
  -- Likely extension will use %s for message, as above for %f.
recompile = "%xmonad --recompile" -- command to recompile
  -- replacing hardcoded "xmonad --recompile". used by mod-q. the actual
  -- recompilation is controlled by ghc_template below.
restart = "%xmonad --restart" -- command to restart
  -- as above for recompile.
  -- this needs more thought as it's actually modifying what is currently a
  -- hardcoded script that uses them and xmessage (to alert if xmonad not on $PATH).
ghc_template = "" -- what is actually run to recompile, replacing hardcoded ghc invo
  -- the actual script is rather complex even before I make it work with
  -- sandboxes and such. see below.
environment = [] -- list of strings to be added to environment
xmonad = "xmonad" -- path to xmonad executable, available as %xmonad in commands
  -- NB. prefer fixing $PATH in environment[], this is a last resort
-- more to be added later?

@@@ xmonad's own recompile check expects to be able to find various files.
@@@ this means xmonad and all .hs files in all lib directories.

Strings can use %-escapes. Am considering also allowing $vars for the ones that
aren't shell commands; if I don't then there will be %-escape versions of the useful
ones. (list of %-escapes to follow later)

original %-escapes, from sandboxed xmonad configs:
    %pid    process id
    %kind   which sandbox (empty, -test, ...)
    %arch   2nd component of executable name xmonad%kind-%arch-%os
    %os     3rd component of executable name xmonad%kind-%arch-%os
    %hc     path to compiler
    %hcver  compiler version
this must be expanded for the new usage. in particular handling libs will be fun...
%[-i%x | x <- %libs(:)] ?

Note, if you use a non-default ghc_template, it will be up to you to ensure that the
result is compatible with your home directory configuration; if your home directory
is on a network share, you will want to arrange for build artifacts to live in a
local directory (this is part of what $XDG_CACHE_HOME is about).

# # #

New API functions for the above:

- getXMonadDir is deprecated, and acts like getXMonadDataDir.
- getXMonadConfigDir produces the directory with sandbox.config.
    You should not put data files used by extensions with the xmonad config in XDG;
      this may be a sandbox directory.
- getXMonadDataDir produces the cache directory.
- getXMonadHs produces the location of xmonad.hs. This may be in a sandbox.
- getXMonadProg produces the location of the main xmonad binary.
- getXMessageProg produces the xmessage command line. (SUBJECT TO CHANGE)
- expandXMonadString STR expands %-escapes in a string.

# # #

Additional issues to consider:
- should the resume thing be addressed at the same time, given that the code needs to
    be touched anyway? (probably not, since it is just appended.)
- main xmonad should accept a parameter to select a config, supplying %kind.

# # #

This is the recompile script from my old newXMonad, supporting config sandboxes
(a different concept from build sandboxes like stack/nix/cabal). It's several
years out of date, and needs adjustment for the new tricks I want it to do.
Also it's wired for when I was using one config for standalone and another for
running xmonad in place of kwin in KDE3.

I'm afraid to ask how something like this is going to fit into ghc_template.
Possibly it'll end up like what I propose for recompile/restart, where the
main script is still hardcoded but uses %-escapes to handle the ghc invocation
and xmessage (below, kdialog).

(The script also handles the restart, and does so assuming it's running under
KDE's session manager.)

  cd "$HOME/.xmonad"
  ghc -W -v0 --make -i -ilib xmonad%kind.hs -o xmonad%kind-%arch-%os >xmonad%kind.errors 2>&1
  if [ $? -ne 0 ] || test -s xmonad%kind.errors; then
    cat xmonad%kind.errors >&2
    kdialog --title=xmonad%kind --sorry "$(cat xmonad%kind.errors)"
  else
    cd
    kill %pid
    sleep 1
    if [ x%kind != x ]; then
      xmonad%kind-%arch-%os && exit 0
    fi
    exec xmonad
    kdialog --title=xmonad%kind --sorry "fallback xmonad went missing?"
    exec /usr/bin/kwin
  fi
  exit 177
